// Copyright (c) 2024 Warren Sanders. All rights reserved.
// Terms of Use:
// This script is provided as-is with no warranties. You are free to use, modify, and distribute this script for non-commercial purposes.
// Any commercial use or redistribution requires explicit permission from the author.

 //       c  c     \\  //              ))         .-.          (o)__(o)           \\\  ///       _     wW  Ww          
 //       (OO)     (o)(o)      /)     (o0)-.    c(O_O)c        (__  __)    wWw    ((O)(O))     _||\    (O)(O)    wWw   
 //     ,'.--.)    ||  ||    (o)(O)    | (_))  ,'.---.`,         (  )      (O)_    | \ ||     (_'\      (..)     (O)_  
 //    / //_|_\    |(__)|     //\\     | .-'  / /|_|_|\ \         )(      .' __)   ||\\||     .'  |      ||     .' __) 
 //     | \___      /.--.\    |(__)|    |(     | \_____/ |        (  )    (  _)     || \ |    ((_) |     _||_   (  _)   
 //    '.    )    -'    `-   /,-. |     \)    '. `---' .`         )/      `.__)    ||  ||     `-`.)    (_/\_)   `.__)  
 //      `-.'               -'   ''     (       `-...-'          (                (_/  \_)       (                     




                                                                                                                                                                                     
                                                                                                                                                                                     
 //   .-.  .           .               .                .--.  .-. --.--       .-.       .---..---..    .     .    .     .  .              .                     .-.                       
 //   (   )_|_          |              _|_   o           |   )(   )  |        (   )        |    |  |\  /|     |\  /|     | _|_   o        _|_   o                |                         
 //    `-.  |   .-.  .-.|--.  .-.  .--. |    .   .-.     |--'  `-.   |        .--'         |    |  | \/ |     | \/ |.  . |  |    .   ____  |    .  .--.--.  .-. -|- .--. .-.  .--.--.  .-. 
 //   (   ) |  (   )(   |  | (   ) `--. |    |  (        |  \ (   )  |       (   `.)       |    |  |    |     |    ||  | |  |    |         |    |  |  |  | (.-'  |  |   (   ) |  |  | (.-' 
 //   `-'  `-' `-'  `-''  `- `-'`-`--' `-'-' `- `-'     '   ` `-' --'--      `---'`       '    '  '    '     '    '`--`-`- `-'-' `-       `-'-' `-'  '  `- `--' '  '    `-'`-'  '  `- `--'
                                                                                                                                                                                     
                                                                                                                                                                                     
//@version=5
indicator("Stochastic RSI & TTM Multi-timeframe v3.2 - Chapo Tendie", shorttitle="S.RSI.TTM.Multi-Timeframe by ChapoT", overlay=true)

length          = input.int(20, "TTM Squeeze Length")

////////////////////////////////////////////////USER INPUT SETTINGS/////////////////////////////////////////////////////////////////1
smoothK = input.int(3, minval=1)
smoothD = input.int(3, minval=1)
lengthRSI = input.int(14, minval=1)
lengthStoch = input.int(14, minval=1)
uselog = input(true, title="Log")
srcIn = input(close, title="Source")

////////////// User input to toggle the Chart & ColorTable fill
showChartFill = input(true, title="Show Chart Fill")
showGraphFill = input(true, title="Show ColorTable Fill")

// colortable histogram display settings
tableYposInput  = input.string("top", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput  = input.string("right", "", options = ["left", "center", "right"])
TC              = input.color(color.new(color.white, 0), "Table Text Color")
TS              = input.string(size.small, "Table Text Size", options = [size.tiny, size.small, size.normal, size.large])
/////////////////////////////////////////////////USER SETTINGS END//////////////////////////////////////////////////////////////////1
// Stochastic Data 
src = uselog ? math.log(srcIn) : srcIn
rsi1 = ta.rsi(src, lengthRSI)
kk = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d = ta.sma(kk, smoothD)
hm = input(false, title="Use Average of both K & D")        // User Setting ////////////////////////////////////////////////////////1
k = hm ? math.avg(kk, d) : kk


////////////////////////////////////////////CREATE CHART FILL //////////////////////////////////////////////2
// Chartfill PushData Sequence
// plot Stochastic Chart Lines if showChartFill = TRUE
c = plot(showChartFill ? k : na, color = color.new(color.white, 0), title="K&D")
a = plot(showChartFill ? kk : na, color = color.new(color.blue, 0), title="KK")
b = plot(showChartFill ? d : na, color = color.new(color.orange, 0), title="D")



f = kk >= d ? color.blue : color.orange

// plot horizontal lines if showChartFill = TRUE
max = hline(showChartFill ? 100 : na, title="Maximum Bound")
upper = hline(showChartFill ? 80 : na, title="Upper Band")
lower = hline(showChartFill ? 20 : na, title="Lower Band")
min = hline(showChartFill ? 0 : na, title="Minimum Bound")


// Fill background when data on chart

fill(max, upper, color=color.new(#ff0000, 75), title='Overbought Background')  // Red background from 80 to 100
fill(upper, lower, color=color.new(color.aqua, 95), title='Background')
fill(lower, min, color=color.new(#00ac06, 75), title='Oversold Background')  // Green background from 0 to 20


/////////////////////////////////////////////////////////////////////////////////////////////////////////////3





//BOLLINGER BANDS
BB_mult         = input.float(2.0, "Bollinger Band STD Multiplier")
BB_basis        = ta.sma(close, length)
dev             = BB_mult * ta.stdev(close, length)
BB_upper        = BB_basis + dev
BB_lower        = BB_basis - dev

//KELTNER CHANNELS
KC_mult_high    = input.float(1.0, "Keltner Channel #1")
KC_mult_mid     = input.float(1.5, "Keltner Channel #2")
KC_mult_low     = input.float(2.0, "Keltner Channel #3")
KC_basis        = ta.sma(close, length)
devKC           = ta.sma(ta.tr, length)
KC_upper_high   = KC_basis + devKC * KC_mult_high
KC_lower_high   = KC_basis - devKC * KC_mult_high
KC_upper_mid    = KC_basis + devKC * KC_mult_mid
KC_lower_mid    = KC_basis - devKC * KC_mult_mid
KC_upper_low    = KC_basis + devKC * KC_mult_low
KC_lower_low    = KC_basis - devKC * KC_mult_low

//SQUEEZE CONDITIONS
NoSqz           = BB_lower < KC_lower_low or BB_upper > KC_upper_low //NO SQUEEZE: GREEN
LowSqz          = BB_lower >= KC_lower_low or BB_upper <= KC_upper_low //LOW COMPRESSION: BLACK
MidSqz          = BB_lower >= KC_lower_mid or BB_upper <= KC_upper_mid //MID COMPRESSION: RED
HighSqz         = BB_lower >= KC_lower_high or BB_upper <= KC_upper_high //HIGH COMPRESSION: ORANGE

//MOMENTUM OSCILLATOR
mom             = ta.linreg(close - math.avg(math.avg(ta.highest(high, length), ta.lowest(low, length)), ta.sma(close, length)), length, 0)

//MOMENTUM HISTOGRAM COLOR
mom_up1_col     = input.color(color.new(color.aqua, 0), title = "+ive Rising Momentum", group = "Histogram Color")
mom_up2_col     = input.color(color.new(#2962ff, 0), title = "+ive Falling Momentum", group = "Histogram Color")
mom_down1_col   = input.color(color.new(color.red, 0), title = "-ive Rising Momentum", group = "Histogram Color")
mom_down2_col   = input.color(color.new(color.yellow, 0), title = "-ive Falling Momentum", group = "Histogram Color")
//MOMENTUM HISTOGRAM CONDITIONS
iff_1           = mom > nz(mom[1]) ? mom_up1_col : mom_up2_col
iff_2           = mom < nz(mom[1]) ? mom_down1_col : mom_down2_col
mom_color       = mom > 0 ? iff_1 : iff_2

//SQUEEZE DOTS COLOR
NoSqz_Col       = input.color(color.new(color.green, 0), title = "No Squeeze", group = "Squeeze Dot Color")
LowSqz_Col      = input.color(color.new(color.black, 0), title = "Low Compression", group = "Squeeze Dot Color")
MidSqz_Col      = input.color(color.new(color.red, 0), title = "Medium Compression", group = "Squeeze Dot Color")
HighSqz_Col     = input.color(color.new(color.orange, 0), title = "High Compression", group = "Squeeze Dot Color")
// SQUEEZE DOTS CONDITIONS
sq_color        = HighSqz ? HighSqz_Col : MidSqz ? MidSqz_Col : LowSqz ? LowSqz_Col : NoSqz_Col

//STOCHASTIC HISTOGRAM COLOR

stoHIGH_Col = input.color(color.new(color.blue, 0), title = "High stoch", group = "Stoch Color")
stoLOW_Col  = input.color(color.new(color.purple, 0), title = "LOW stoch", group = "Stoch Color")
stoMAX_Col  = input.color(color.new(color.red, 0), title = "MAX stoch", group = "Stoch Color")
stoMIN_Col  = input.color(color.new(color.green, 0), title = "MIN stoch", group = "Stoch Color")
stoRANGE_Col  = input.color(color.new(color.gray, 0), title = "Ranging stoch", group = "Stoch Color")

// Stochastic trigger conditions 
stoMAX     = k > 95
stoHIGH    = k >= 80 and k < 95
stoLOW     = k <= 20 and k > 5
stoMIN     = k < 5
stoRANGE   = k < 80 and k > 5
//DEFINE Stochastic sto_color CONDTIONS
sto_color = stoMAX ? stoMAX_Col : stoHIGH ? stoHIGH_Col : stoLOW ? stoLOW_Col : stoMIN ? stoMIN_Col : stoRANGE_Col

//////////////////////////////////////////////// COLORCHART HISTORGAM CALLDATA SEQUENCE ////////////////////////////////////////////4
//MULTI TIMEFRAME HISTOGRAM COLOR data
[HC_1m]         = request.security(syminfo.tickerid, "1", [mom_color])
[HC_5m]         = request.security(syminfo.tickerid, "5", [mom_color])
[HC_10m]        = request.security(syminfo.tickerid, "10", [mom_color])
[HC_15m]        = request.security(syminfo.tickerid, "15", [mom_color])
[HC_20m]        = request.security(syminfo.tickerid, "20", [mom_color])
[HC_30m]        = request.security(syminfo.tickerid, "30", [mom_color])
[HC_45m]        = request.security(syminfo.tickerid, "45", [mom_color])
[HC_1H]         = request.security(syminfo.tickerid, "60", [mom_color])
[HC_4H]         = request.security(syminfo.tickerid, "240", [mom_color])
[HC_D]          = request.security(syminfo.tickerid, "D"  , [mom_color])
[HC_W]          = request.security(syminfo.tickerid, "W"  , [mom_color])


//MULTI TIMEFRAME SQUEEZE COLOR data
[SC_1m]         = request.security(syminfo.tickerid, "1", [sq_color])
[SC_5m]         = request.security(syminfo.tickerid, "5", [sq_color])
[SC_10m]         = request.security(syminfo.tickerid, "10", [sq_color])
[SC_15m]        = request.security(syminfo.tickerid, "15", [sq_color])
[SC_20m]         = request.security(syminfo.tickerid, "20", [sq_color])
[SC_30m]        = request.security(syminfo.tickerid, "30", [sq_color])
[SC_45m]         = request.security(syminfo.tickerid, "45", [sq_color])
[SC_1H]         = request.security(syminfo.tickerid, "60", [sq_color])
[SC_4H]         = request.security(syminfo.tickerid, "240", [sq_color])
[SC_D]          = request.security(syminfo.tickerid, "D"  , [sq_color])
[SC_W]          = request.security(syminfo.tickerid, "W"  , [sq_color])


// MULTI TIMEFRAME STOCHASTIC RSI data
[STO_2m]         = request.security(syminfo.tickerid, "2", [sto_color])
[STO_6m]         = request.security(syminfo.tickerid, "6", [sto_color])
[STO_9m]        = request.security(syminfo.tickerid, "9", [sto_color])
[STO_13m]        = request.security(syminfo.tickerid, "13", [sto_color])
[STO_18m]         = request.security(syminfo.tickerid, "18", [sto_color])
[STO_23m]         = request.security(syminfo.tickerid, "23", [sto_color])
[STO_26m]          = request.security(syminfo.tickerid, "26"  , [sto_color])
[STO_31m]          = request.security(syminfo.tickerid, "31"  , [sto_color])
[STO_35m]          = request.security(syminfo.tickerid, "35"  , [sto_color])
[STO_40m]          = request.security(syminfo.tickerid, "35"  , [sto_color])
[STO_47m]          = request.security(syminfo.tickerid, "40"  , [sto_color])



///////////////////////////////// Create color table histogram/////////////////////////////////////////////////////////////5
var table TTM   = table.new(tableYposInput + "_" + tableXposInput, 12, 3, border_width = 1)



//////////////////////////////// Color table PushDataSequence//////////////////////////////////////////////////////////////
// Barstate.isconfirmed: Returns true if the script is calculating the last (closing) update of the current bar. The next script calculation will be on the new bar data
if (barstate.isconfirmed and showGraphFill) // Checks if Barstate.isconfirmed and showGraphFill = TRUE
    table.cell(TTM, 0, 0, "MOM", text_color = color.new(color.white, 0), bgcolor = color.new(color.gray, 0), text_size = TS)
    table.cell(TTM, 1, 0, "1m", text_color = TC, bgcolor = HC_1m, text_size = TS)
    table.cell(TTM, 2, 0, "5m", text_color = TC, bgcolor = HC_5m, text_size = TS)
    table.cell(TTM, 3, 0, "10m", text_color = TC, bgcolor = HC_10m, text_size = TS)
    table.cell(TTM, 4, 0, "15m", text_color = TC, bgcolor = HC_15m, text_size = TS)
    table.cell(TTM, 5, 0, "20m", text_color = TC, bgcolor = HC_20m, text_size = TS)
    table.cell(TTM, 6, 0, "30m", text_color = TC, bgcolor = HC_30m, text_size = TS)
    table.cell(TTM, 7, 0, "45m", text_color = TC, bgcolor = HC_45m, text_size = TS)
    table.cell(TTM, 8, 0, "1H", text_color = TC, bgcolor = HC_1H, text_size = TS)
    table.cell(TTM, 9, 0, "4H", text_color = TC, bgcolor = HC_4H, text_size = TS)
    table.cell(TTM, 10, 0, "D", text_color = TC, bgcolor = HC_D, text_size = TS)
    table.cell(TTM, 11, 0, "W", text_color = TC, bgcolor = HC_W, text_size = TS)
    
    
    table.cell(TTM, 0, 1, "SQZ", text_color = color.new(color.white, 0), bgcolor = color.new(color.gray, 0), text_size = TS)
    table.cell(TTM, 1, 1, "1m", text_color = TC, bgcolor = SC_1m, text_size = TS)
    table.cell(TTM, 2, 1, "5m", text_color = TC, bgcolor = SC_5m, text_size = TS)
    table.cell(TTM, 3, 1, "10m", text_color = TC, bgcolor = SC_10m, text_size = TS)
    table.cell(TTM, 4, 1, "15m", text_color = TC, bgcolor = SC_15m, text_size = TS)
    table.cell(TTM, 5, 1, "20m", text_color = TC, bgcolor = SC_20m, text_size = TS)
    table.cell(TTM, 6, 1, "30m", text_color = TC, bgcolor = SC_30m, text_size = TS)
    table.cell(TTM, 7, 1, "45m", text_color = TC, bgcolor = SC_45m, text_size = TS)
    table.cell(TTM, 8, 1, "1H", text_color = TC, bgcolor = SC_1H, text_size = TS)
    table.cell(TTM, 9, 1, "4H", text_color = TC, bgcolor = SC_4H, text_size = TS)
    table.cell(TTM, 10, 1, "D", text_color = TC, bgcolor = SC_D, text_size = TS)
    table.cell(TTM, 11, 1, "W", text_color = TC, bgcolor = SC_W, text_size = TS)
    

    table.cell(TTM, 0, 2, "STOC", text_color = color.new(color.white, 0), bgcolor = color.new(color.gray, 0), text_size = TS)
    table.cell(TTM, 1, 2, "2m", text_color = TC, bgcolor = STO_2m, text_size = TS)
    table.cell(TTM, 2, 2, "6m", text_color = TC, bgcolor = STO_6m, text_size = TS)
    table.cell(TTM, 3, 2, "9m", text_color = TC, bgcolor = STO_9m, text_size = TS)
    table.cell(TTM, 4, 2, "13m", text_color = TC, bgcolor = STO_13m, text_size = TS)
    table.cell(TTM, 5, 2, "18m", text_color = TC, bgcolor = STO_18m, text_size = TS)
    table.cell(TTM, 6, 2, "23m", text_color = TC, bgcolor = STO_23m, text_size = TS)
    table.cell(TTM, 7, 2, "26m", text_color = TC, bgcolor = STO_26m, text_size = TS)
    table.cell(TTM, 8, 2, "31m", text_color = TC, bgcolor = STO_31m, text_size = TS)
    table.cell(TTM, 9, 2, "35m", text_color = TC, bgcolor = STO_35m, text_size = TS)
    table.cell(TTM, 10, 2, "40m", text_color = TC, bgcolor = STO_40m, text_size = TS)
    table.cell(TTM, 11, 2, "47m", text_color = TC, bgcolor = STO_47m, text_size = TS)





    

  